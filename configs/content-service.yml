# Content Service Configuration
# This file will be served by Config Server

spring:
  application:
    name: content-service
  
  # PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:yushan_content}
    username: ${DB_USERNAME:yushan_user}
    password: ${DB_PASSWORD:change_me_in_production}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000

  # JPA/Hibernate Configuration - Disabled (using MyBatis only)
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  # MyBatis Configuration
  mybatis:
    mapper-locations: classpath:/mapper/**Mapper.xml
    type-aliases-package: com.yushan.content_service.entity
    config-location: classpath:config/mybatis-config.xml

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2

  # Elasticsearch Configuration
  elasticsearch:
    rest:
      uris: ${ELASTICSEARCH_URL:http://localhost:9200}
      connection-timeout: 5
      read-timeout: 30

  # Kafka Configuration (Phase 2)
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: content-service
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      client-id: content-service
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      acks: all
      enable-idempotence: true
      compression-type: snappy
      request-timeout-ms: 30000
      delivery-timeout-ms: 120000
      topic:
        novel-events: novel-events
        novel-views: novel-views
        novel-status-changes: novel-status-changes
        chapter-events: chapter-events
        chapter-views: chapter-views
        chapter-published: chapter-published

  # Static Resource Configuration
  web:
    resources:
      static-locations: classpath:/static/,file:uploads/
      cache:
        cachecontrol:
          max-age: 31536000  # 1 year cache for images

# Server Configuration
server:
  port: ${SERVER_PORT:8082}
  servlet:
    context-path: /
  compression:
    enabled: true

# Eureka Client Configuration
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true

  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: 1.0.0
      description: Content management service for novels and chapters

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:yushan-micro-service-secret-key-for-jwt-token-generation-and-validation-2024}
  issuer: ${JWT_ISSUER:yushan-micro-service}
  algorithm: ${JWT_ALGORITHM:HS256}

# File Storage Configuration
# For development: use local storage
# For production: change to S3 storage
app:
  storage:
    type: ${STORAGE_TYPE:local}  # Change to 's3' when deploying to AWS
    local:
      path: uploads
      base-url: ${BASE_URL:http://localhost:8082}
    # S3 Configuration (uncomment when deploying to AWS)
    # s3:
    #   bucket-name: your-bucket-name
    #   region: us-east-1
    #   access-key: your-access-key
    #   secret-key: your-secret-key
    #   base-url: https://your-bucket-name.s3.amazonaws.com
  image:
    max-file-size: ${MAX_FILE_SIZE:10485760}  # 10MB in bytes
    max-width: ${MAX_WIDTH:4000}
    max-height: ${MAX_HEIGHT:4000}
    min-width: ${MIN_WIDTH:200}
    min-height: ${MIN_HEIGHT:200}
    supported-formats: ${SUPPORTED_FORMATS:jpeg,jpg,png,gif,webp}
    standard-size:
      width: ${STANDARD_WIDTH:800}
      height: ${STANDARD_HEIGHT:600}

# Logging Configuration
logging:
  level:
    com.yushan.content: ${LOG_LEVEL:DEBUG}
    org.springframework.cloud: ${SPRING_CLOUD_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BINDER_LOG_LEVEL:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
