spring:
  application:
    name: engagement-service

  # PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:yushan_engagement}
    username: ${DB_USERNAME:yushan_engagement}
    password: ${DB_PASSWORD:change_me_in_production}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000

  # JPA/Hibernate Configuration - Disabled (using MyBatis only)
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  # MyBatis Configuration
  mybatis:
    mapper-locations: classpath:/mapper/**Mapper.xml
    type-aliases-package: com.yushan.engagement_service.entity
    config-location: classpath:config/mybatis-config.xml

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2

  # Elasticsearch Configuration
  elasticsearch:
    rest:
      uris: ${ELASTICSEARCH_SCHEME:http}://${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}
      connection-timeout: 5
      read-timeout: 30

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: engagement-service
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      client-id: engagement-service
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      acks: all
      enable-idempotence: true
      compression-type: none
      request-timeout-ms: 30000
      delivery-timeout-ms: 120000
      properties:
        spring.json.add.type.headers: false
        spring.json.use.type.headers: false
      topic:
        comment-events: comment-events
        review-events: review-events
        vote-events: vote-events

  # Static Resource Configuration
  web:
    resources:
      static-locations: classpath:/static/,file:uploads/
      cache:
        cachecontrol:
          max-age: 31536000  # 1 year cache for images

# Server Configuration
server:
  port: ${SERVER_PORT:8084}
  servlet:
    context-path: /
  compression:
    enabled: true

# Eureka Client Configuration
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true

  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: 1.0.0
      description: Engagement service for comments, reviews and votes

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:yushan-micro-service-secret-key-for-jwt-token-generation-and-validation-2024}
  issuer: ${JWT_ISSUER:yushan-micro-service}
  algorithm: ${JWT_ALGORITHM:HS256}

# File Storage Configuration (for static resource serving only)
app:
  storage:
    local:
      path: ${STORAGE_PATH:uploads}  # Path for serving static files

# Logging Configuration
logging:
  level:
    com.yushan.engagement: ${LOG_LEVEL_ENGAGEMENT:DEBUG}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:INFO}
    org.hibernate.SQL: ${LOG_LEVEL_HIBERNATE:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_HIBERNATE_BINDER:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
